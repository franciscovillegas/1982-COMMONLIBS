/*
 * File: ctrTool.js
 *
 * This file was generated by PeopleManager
 * 
 */


/*
	log:					genera un log en la consola del navegador.
	msgError:				Muestra un mensaje predefinido de error.
	fnGetUrlParameter:		Obtiene el valor del parametro indicado desde la url.
	fnAbrirFormulario:		Abrir un windows form definido.
	fnCheckRut:				Retorna True si el rut ingresado es correcto (MOD11).
	fnCheckDV:				Retorna True si el dígito verificador ingresado es válido (MOD11).
	fnFormularioBusqueda:	Crea un formulrio de búsqueda para un store definido.
	fnReplaceAll:			Remplaza en un texto todas las coincidencias buscadas por el valor definido.
	fnGetAllChildren:		Obtiene todos los objetos contenidos en un objeto definido.
	fnCamposHabilitados:	Establece el estado habilitado o no para todos los campos de un contenedor.
	fnOpenWindowWithPost:	Abre una nueva ventana en el navegador con la url indicada.
	fnAddURL:				Agrega un iframe con la url indicada en el contenedor indicado.
	fnSession:				Agrega verificación de sesión para todos los store existentes en el proyecto.
	
	fnGridDelSeleccionados:	Elimina los registros seleccionados en un grid.
	fnGridDelRecord:		Elimina un registro del store que contiene un grid.
	fnGridMoverRecord:		Mueve un regístro de posicion.
	fnGridExport:			Exporta el contenido de una grilla a Excel (Mediante llamada a la BD).
	fnGridCheckShow:		Ocupta o Muestra l columna CheckBoxSelectionMode.
	
	fnStoreReturnArray:		Crea un arreglo desde el contenido de un store.
	fnStoreGetRecord		Retorna un record buscado de un store definido.
	
	fnUpdateRow:			?
	
	fnEnd:					Sólo para indicar el final del controller.
*/

Ext.define('MyApp.controller.ctrTool', {
    extend: 'Ext.app.Controller',

    log: function(msg) {
        try {
            console.log(msg);
        }
        catch(e) {
        }
    },

    msgError: function() {
        var mensg='<p>Ha ocurido un error al generar su solicitud.</p> ';
        mensg=mensg+'<p>Por favor int\u00e9ntelo nuevamente.</p> ';

        Ext.Msg.show({
            title: 'Error inesperado',
            msg: mensg,
            buttons: Ext.Msg.OK,
            icon: Ext.Msg.ERROR
        });
    },

    fnGetUrlParameter: function(sParam) {

        var sPageURL = window.location.search.substring(1);
        var sURLVariables = sPageURL.split('&');

        for (var i = 0; i < sURLVariables.length; i++) {
            var sParameterName = sURLVariables[i].split('=');

            if (sParameterName[0] == sParam) {
                return sParameterName[1];
            }
        }

    },

    fnAbrirFormulario: function(pnlPanel, mwWindow) {
        var view = 'MyApp.view.'+mwWindow;
        var idWindwow = mwWindow.replace('.','');
        if(Ext.get(idWindwow) === null) {
            var win = Ext.create(view);
            if (pnlPanel!==null){
                var idPanel = pnlPanel.replace('.','');
                Ext.getCmp(idPanel).add(win);
            }
            win.show();
        }
        else {
            Ext.getCmp(idWindwow).show();
            Ext.WindowMgr.bringToFront(idWindwow);
        }
    },

    fnCheckRut: function(solorut, digit) {

        var dv = digit;
        if (this.fnCheckDV(dv) !== true)
            return false;
        var dvr = '0';
        suma = 0;
        mul  = 2;

        for (i= solorut.length -1 ; i >= 0; i--)
        {
            suma = suma + solorut.charAt(i) * mul;
            if (mul == 7)
                mul = 2;
            else
                mul++;
        }

        res = suma % 11;

        if (res==1) dvr = 'k';
        else
            if (res==0) dvr = '0';
        else
        {
            dvi = 11-res;
            dvr = dvi + "";
        }

        if ( dvr != digit.toLowerCase() )
            return(false);
        else
            return(true);

    },
    
    fnCheckDV: function(dvr) {
        dv1 = dvr + "";
        if ( dv1 != '0' && dv1 != '1' && dv1 != '2' && dv1 != '3' && dv1 != '4' && dv1 != '5' && dv1 != '6' && dv1 != '7' && dv1 != '8' && dv1 != '9' && dv1 != 'k'  && dv1 != 'K')
            return false;
        return true;
    },

    fnFormularioBusqueda: function(strTitulo, strStore, strDataIndex, strFuncion) {
        var dialog = Ext.create('Ext.window.Window', {

            renderTo : Ext.getBody(),
            title: strTitulo,
            itemId: 'mwSelector',
            id: 'mwSelector',
            modal: true,
            constrain: true,
            height: 331,
            width: 478,
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            resizable: false,
            items: [
                {
                    xtype: 'textfield',
                    id: 'tbxSelector_Filtro',
                    fieldLabel: 'Buscar',
                    labelWidth: 50,
                    margin: 2,
                    listeners: {
                        change: function(field, newValue, oldValue, eOpts) {
                            if (newValue.length===0 || newValue.length>3){
                                var store = Ext.getCmp('gpnSelector').store;
                                Ext.apply(store.getProxy().extraParams, {query: newValue});
                                store.load();
                            }
                        }
                    }
                },
                {
                    xtype: 'gridpanel',
                    flex: 1,
                    id: 'gpnSelector',
                    margin: 0,
                    hideHeaders: true,
                    store: strStore,
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: strDataIndex,
                            flex: 1
                        }
                    ],
                    listeners: {
                        select: function(rowmodel, record, index, eOpts) {
                            var fn = eval(strFuncion);
                            fn(record);
                            Ext.getCmp('mwSelector').close();
                        }
                    }
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'bottom',
                    layout: {
                        type: 'hbox',
                        pack: 'end'
                    },
                    items: [
                        {
                            xtype: 'button',
                            id: 'btnSelector_Cancelar',
                            icon: '../../images/btns/cross.png',
                            text: 'Cancelar',
                            handler: function () {
                                this.up('.window').close();
                            }
                        }
                    ]
                }
            ]
        });
        dialog.show();
    },

    fnReplaceAll: function(strTexto, strValorBuscado, strNuevoValor) {
        if (strTexto!=undefined || strTexto!=null){
            while(strTexto.indexOf(strValorBuscado) != -1)
                strTexto = strTexto.replace(strValorBuscado,strNuevoValor);
        }
        return strTexto;
    },

    fnGetAllChildren: function(component) {
        var children = component.items ? component.items.items : [];
        Ext.each(children, function (child) {
            children = children.concat(fnGetAllChildren(child));
        });
        return children;
    },

    fnCamposHabilitados: function(strContenedor, bolActivo) {
    	
    	fnFindChildrens(Ext.getCmp(strContenedor));

    	function fnFindChildrens(componente){
    	    if (componente.xtype==='form' || componente.xtype==='container' || componente.xtype==='fieldset' || componente.xtype==='fieldcontainer'){
    	        Ext.each(componente.items.items, function(componente, index) {
    	            fnFindChildrens(componente);
    	        });
    	    }else if (componente.xtype!=='label' && componente.xtype!=='button'){
    	        fnSetEstado(componente);
    	    }
    	}

    	function fnSetEstado(componente){
    	    try {
    	        componente.setReadOnly(!bolActivo);
    	    }catch(e){
    	        log('No fue posible asignar el estado al componente: '+componente.id+' xtype: '+componente.xtype);
    	        log(e);
    	        error=true;
    	    }
    	}
    	
    },
    
    fnOpenWindowWithPost: function(url, windowoption, name, params) {
        var form = document.createElement('form');
        form.setAttribute('method', 'post');
        form.setAttribute('action', url);
        form.setAttribute('target', name);

        for (var i in params) {
            if (params.hasOwnProperty(i)) {
                var input = document.createElement('input');
                input.type = 'hidden';
                input.name = i;
                input.value = params[i];
                form.appendChild(input);
            }
        }

        document.body.appendChild(form);

        window.open('about:blank', name, windowoption);

        form.submit();

        document.body.removeChild(form);
    },
    
    fnAddURL: function(contenedor, url) {
    	Ext.getCmp(contenedor).update('<iframe style="overflow:auto; width: 100%; height: 100%;" frameborder="0" name="editFrame" id="editFrame" src="'+url+'"></iframe>');
    },
    
    fnSession: function() {
        /*SIN SESIÓN*/
        Ext.Ajax.setDefaultHeaders({
            'Accept':'application/json'
        });

        Ext.data.StoreManager.each(function(k,v) {

            Ext.apply(k.on("load", function(store, operation, success, response) {
                try {
                    var  json = Ext.JSON.decode(response._response.responseText);

                    if(!json.success) {
                        if(!json.usuario_is_session_valid && json.message!==undefined) {
                            Ext.Msg.alert("Error", json.message, function() {
                                parent.window.location.href = json.context_path;
                            });
                        }
                    }
                }
                catch(e) {
                	ctr.Tool.log(e);
                }

            }));

        });

        /*SIN SESIÓN*/
    },
    

    fnGridDelSeleccionados: function(strGrid) {
        var grid = Ext.getCmp(strGrid);
        var store = grid.getStore();

        var selectedRecord = grid.getSelectionModel().getSelection()[0];
        rowIndex = grid.store.indexOf(selectedRecord);

        store.removeAt(rowIndex);

        if (store.getCount() > rowIndex) {
            grid.getSelectionModel().select(rowIndex);
        }else if (store.getCount() > 0) {
            grid.getSelectionModel().select(store.getCount()-1);
        }
    },

    fnGridDelRecord: function(strGrid, rowIndex) {
        var grid = Ext.getCmp(strGrid);
        var store = grid.getStore();

        store.removeAt(rowIndex);

        if (store.getCount() > rowIndex) {
            grid.getSelectionModel().select(rowIndex);
        }else if (store.getCount() > 0) {
            grid.getSelectionModel().select(store.getCount()-1);
        }
    },

    fnGridMoverRecord: function(grid, direccion) {
        var record = grid.getSelectionModel().getSelection()[0];
        if (record) {
            var index = grid.store.indexOf(record);
            if (direccion < 0) {
                index--;
                if (index < 0) {
                    return;
                }
            } else {
                index++;
                if (index >= grid.store.getCount()) {
                    return;
                }
            }
            grid.store.remove(record);
            grid.store.insert(index, record);
            grid.getSelectionModel().select(record);
        }else{
            return;
        }
    },

    fnGridExport: function(grid) {
    	if (grid.store.getCount()===0){
            Ext.Msg.show({
                title: 'Exportar',
                msg: 'Sin informaci\u00f3n para exportar.',
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.INFO
            });
        }else{
            var strParams = '';
            var ArrColumnas = [];

            Ext.iterate(grid.store.getProxy().extraParams, function(key, value) {
                strParams=strParams+'&'+key+'='+value;
            });

            var strURL = grid.store.getProxy().url+'&return_type=application/excel'+strParams;
            Ext.each(grid.columns, function(col, index) {
                if (grid.columns[index].isVisible() && (grid.columns[index].xtype!=='actioncolumn' || grid.columns[index].dataIndex!==null )){
                	var bolVisible = true;
                    var strTexto=col.text;
                    if (strTexto==='&#160;'){
                    	strTexto = col.container.component.text;
                    }else if (col.container.component.text!==undefined){
                    	if (col.container.component.isVisible()){
                    		strTexto=col.container.component.text+' '+col.text;
                    	}else{
                    		bolVisible = false;
                    	}
                    }
                    if (bolVisible){
	                    strTexto = strTexto.replace('%', '%25');
	                	ArrColumnas.push({columna: col.dataIndex, texto: strTexto});
                    }
                }
            });

            var url  =  strURL + '&columnas='+Ext.encode(ArrColumnas);

            window.document.location = url;

        }
    },

    fnGridCheckShow: function(strGrid, bolVisible) {
    	if (bolVisible) {
    		Ext.getCmp(strGrid).getView().headerCt.items.getAt(0).show();
    	}else{
    		Ext.getCmp(strGrid).getView().headerCt.items.getAt(0).hide();
    	}
    },
    
    fnStoreReturnArray: function(idStore) {
        var array = [];
        Ext.getStore(idStore).each(function(record){
           array.push(record.data);
        });
        return array;

    },

    fnStoreGetRecord: function(store, index, campo, valor) {
        if (campo!==null && campo!==undefined){
            index = store.findExact(campo, valor);
        }
        return store.getAt(index);
    },

    
    fnUpdateRow: function(idObjEditor, idData, nomData, context) {
        if( Ext.getCmp(idObjEditor).getValue() != Ext.getCmp(idObjEditor).getRawValue() ) {

            context.record.data[idData]  = Ext.getCmp(idObjEditor).getValue();
            context.record.data[nomData] = Ext.getCmp(idObjEditor).getRawValue();

        }

        if( context.record.data.record_accion != "new") {
            context.record.data.record_accion = "upd";
        }

    },

    fnEnd: function(){
    	//Sólo para finalizar
    }
    
});
