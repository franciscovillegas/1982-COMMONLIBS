/*
 * File: ctrFiltros.js
 *
 * This file was generated by PeopleManager
 * 
 */

Ext.define('MyApp.controller.ctrFiltros', {
    extend: 'Ext.app.Controller',

    control: {
        "#mwFiltros": {
            show: 'onMwFiltrosShow'
        },
        "datefield": {
            change: 'onDatefieldChange'
        },
        "combobox": {
            change: 'onComboboxChange'
        },
        "numberfield": {
            change: 'onNumberfieldChange'
        },
        "textfield": {
            change: 'onTextfieldChange'
        },
        "#btnFiltrosAceptar": {
            click: 'onBtnFiltrosAceptarClick'
        }
    },

    onMwFiltrosShow: function(component, eOpts) {
        this.fnIniciar(component);
    },

    onDatefieldChange: function(field, newValue, oldValue, eOpts) {
        if (field.id.substring(0,9)==='dteFiltro'){
            for (var i=0, l=enmParam.arrFiltros.length; i < l; i++) {
                if (enmParam.arrFiltros[i].name===field.name){
                    enmParam.arrFiltros[i].value = newValue;
                }
            }
        }
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        if (field.id.substring(0,9)==='cmbFiltro'){
            for (var i=0, l=enmParam.arrFiltros.length; i < l; i++) {
                if (enmParam.arrFiltros[i].name===field.name){
                    enmParam.arrFiltros[i].value = newValue;
                }
            }
        }
    },

    onNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        if (field.id.substring(0,9)==='nmbFiltro'){
            for (var i=0, l=enmParam.arrFiltros.length; i < l; i++) {
                if (enmParam.arrFiltros[i].name===field.name){
                    enmParam.arrFiltros[i].value = newValue;
                }
            }
        }
    },

    onTextfieldChange: function(field, newValue, oldValue, eOpts) {
        if (field.id.substring(0,9)==='tbxFiltro'){
            for (var i=0, l=enmParam.arrFiltros.length; i < l; i++) {
                if (enmParam.arrFiltros[i].name===field.name){
                    enmParam.arrFiltros[i].value = newValue;
                }
            }
        }
    },

    onBtnFiltrosAceptarClick: function(button, e, eOpts) {
        this.fnAplicarFiltros();
    },

    fnAplicarFiltros: function(strStore, strCmpFiltros) {
    	
    	enmParam.filtros = '';
    	for (var i=0, l=enmParam.arrFiltros.length; i < l; i++) {
    	    var filtro = enmParam.arrFiltros[i];
    	    if (filtro.value!==null){
    	        if (filtro.xtype==='combo'){
    	            if (Ext.getCmp(filtro.id).store.findExact(Ext.getCmp(filtro.id).numberfield, filtro.value)!==-1){
    	                enmParam.filtros += filtro.name+':'+filtro.value+'|';
    	            }
    	        }else if (filtro.xtype==='datefield'){
    	            enmParam.filtros += filtro.name+':'+Ext.Date.format(filtro.value, 'Ymd')+'|';
    	        }else{
    	            enmParam.filtros += filtro.name+':'+filtro.value+'|';
    	        }
    	    }
    	    if (i===l-1){
    	        fnAplicar();
    	    }
    	}

    	function fnAplicar(){
    		Ext.apply(Ext.getStore(strStore).getProxy().extraParams, {filtros: enmParam.filtros});
            Ext.getStore(strStore).load();
            if (strCmpFiltros!==undefined){
            	Ext.getCmp(strCmpFiltros).close();
            }
    	}

    },

    fnIniciar(component){
    	if(!enmParam.arrFiltros){
    		Param.arrFiltros = [];
    	}
    	if (enmParam.arrFiltros.length===0){
            var x=0;
            var componentes = ctr.Tool.fnGetAllChildren(component);
            for (var i=0, l=componentes.length; i < l; i++) {
                if (componentes[i].id.substring(3,9)==='Filtro'){
                    enmParam.arrFiltros[x]={xtype: componentes[i].xtype, id: componentes[i].id, name: componentes[i].name, value: null};
                    x++;
                }
            }
        }
    }

});
