/*
 * File: app/view/panelGrupos_grupo.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.panelGrupos_grupo', {
    extend: 'Ext.form.Panel',
    alias: 'widget.panelGrupos_grupo',

    requires: [
        'MyApp.view.panelGrupos_grupoViewModel',
        'Ext.button.Button',
        'Ext.form.FieldContainer',
        'Ext.form.field.TextArea',
        'Ext.form.Label',
        'Ext.form.field.ComboBox',
        'Ext.grid.Panel',
        'Ext.toolbar.Paging',
        'Ext.selection.CheckboxModel',
        'Ext.toolbar.Separator',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.tree.Column',
        'Ext.form.field.Radio',
        'Ext.form.field.Hidden'
    ],

    viewModel: {
        type: 'panelGrupos_grupo'
    },
    autoShow: true,
    id: 'panelGrupos_grupo',
    scrollable: true,
    bodyPadding: 10,
    title: 'Grupo',
    defaultListenerScope: true,

    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            layout: {
                type: 'hbox',
                pack: 'end'
            },
            items: [
                {
                    xtype: 'button',
                    handler: function(button, e) {

                        var form = Ext.getCmp('panelGrupos_grupo').getForm();
                        if (form.isValid()) {
                            var url = "../../../EjeCore?claseweb=cl.eje.view.sencha.ConfSegura&";
                            url    += "modulo=eje_generico_correspondenciaautomatica&accion=add&thing=Group";



                            Ext.getCmp("hidden_cc").setValue(MyApp.app.getController("ctrTool").grid_getSelected("grid_cc", "id"));
                            Ext.getCmp("hidden_personas").setValue(MyApp.app.getController("ctrTool").grid_getSelected("grid_personas", "rut"));
                            Ext.getCmp("hidden_cargos").setValue(MyApp.app.getController("ctrTool").grid_getSelected("grid_personas_cargos", "id"));
                            Ext.getCmp("hidden_ciudades").setValue(MyApp.app.getController("ctrTool").grid_getSelected("grid_personas_ciudades", "id"));
                            Ext.getCmp("hidden_comunas").setValue(MyApp.app.getController("ctrTool").grid_getSelected("grid_personas_comunas", "id"));
                            Ext.getCmp("hidden_unidades").setValue(MyApp.app.getController("ctrTool").tree_getSelected( Ext.getCmp('tree_personas_organica').getRootNode() , "unid_id"));
                            Ext.getCmp("hidden_empresas").setValue(MyApp.app.getController("ctrTool").tree_getSelected( Ext.getCmp('tree_personas_empresas').getRootNode() , "empresa"));


                            form.submit({
                                waitMsg:'Guardando...',
                                url: url,
                                success: function(form,action) {
                                    var resp = action.result;

                                    Ext.Msg.alert("Correo", "El grupo ha sido configurado.",function() {
                                        Ext.getCmp("panelGrupos_grupo").destroy();
                                        Ext.getStore("libretaJson").load();
                                    });
                                },
                                failure: function(form,action){
                                    Ext.MessageBox.alert('Error',"Error desconocido");
                                }
                            });
                        }
                        else {
                            Ext.MessageBox.alert('Erro', "Error desconocido.");
                        }



                    },
                    icon: '../../images/btns/tick.ico',
                    text: 'Aceptar'
                },
                {
                    xtype: 'button',
                    handler: function(button, e) {
                        Ext.getCmp("panelGrupos_grupo").destroy();

                    },
                    icon: '../../images/btns/cross.ico',
                    text: 'Cancelar'
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'fieldcontainer',
            height: 130,
            maxHeight: 130,
            minHeight: 130,
            layout: 'anchor',
            fieldLabel: '',
            items: [
                {
                    xtype: 'textfield',
                    anchor: '100%',
                    id: 'hidden_id_grupo',
                    fieldLabel: 'ID',
                    labelWidth: 130,
                    name: 'id_grupo',
                    readOnly: true
                },
                {
                    xtype: 'textfield',
                    anchor: '100%',
                    id: 'hidden_nombre',
                    fieldLabel: 'Nombre del grupo',
                    labelWidth: 130,
                    name: 'nombre',
                    allowBlank: false
                },
                {
                    xtype: 'textareafield',
                    anchor: '100%',
                    id: 'hidden_descripcion',
                    fieldLabel: 'Descripción',
                    labelWidth: 130,
                    name: 'descripcion',
                    allowBlank: false
                }
            ]
        },
        {
            xtype: 'fieldcontainer',
            height: 300,
            maxHeight: 300,
            minHeight: 300,
            fieldLabel: '',
            items: [
                {
                    xtype: 'label',
                    text: 'Al momento de enviar el correo:'
                },
                {
                    xtype: 'checkboxfield',
                    padding: '0 0 0 20',
                    fieldLabel: 'Label',
                    hideLabel: true,
                    name: 'include_personas_nuevas',
                    boxLabel: ' Se considerarán todas aquellas personas que hayan ingresado durante el mes.',
                    inputValue: '1',
                    uncheckedValue: '0'
                },
                {
                    xtype: 'checkboxfield',
                    padding: '0 0 0 20',
                    fieldLabel: 'Label',
                    hideLabel: true,
                    name: 'include_personas_decumpleanos',
                    boxLabel: 'Se considerarán todas aquellas personas que están de cumpleaños el día de ejecución',
                    inputValue: '1',
                    uncheckedValue: '0'
                },
                {
                    xtype: 'checkboxfield',
                    padding: '0 0 0 20',
                    fieldLabel: 'Label',
                    hideLabel: true,
                    name: 'include_personas_genero',
                    boxLabel: 'Filtro por G&eacute;nero',
                    inputValue: '1',
                    uncheckedValue: '0',
                    listeners: {
                        change: 'onCheckboxfieldChange'
                    }
                },
                {
                    xtype: 'combobox',
                    id: 'combo_genero',
                    padding: '0 0 0 100',
                    fieldLabel: 'Género',
                    name: 'genero',
                    displayField: 'nombre',
                    store: 'jsonGroupGenero',
                    valueField: 'id'
                },
                {
                    xtype: 'checkboxfield',
                    padding: '0 0 0 20',
                    fieldLabel: 'Label',
                    hideLabel: true,
                    name: 'include_personas_cc',
                    boxLabel: 'Filtro por Centro de Costos',
                    inputValue: '1',
                    uncheckedValue: '0',
                    listeners: {
                        change: 'onCheckboxfieldChange1'
                    }
                },
                {
                    xtype: 'gridpanel',
                    height: 300,
                    id: 'grid_cc',
                    maxHeight: 300,
                    minHeight: 300,
                    header: false,
                    title: 'Centro de costos',
                    store: 'jsonGroupCentroCosto',
                    viewConfig: {
                        width: 626
                    },
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'bottom',
                            width: 360,
                            displayInfo: true,
                            store: 'jsonGroupCentroCosto'
                        },
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'label',
                                    maxWidth: 100,
                                    minWidth: 100,
                                    width: 100,
                                    text: 'Centro de Costos'
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        Ext.getStore("jsonGroupCentroCosto").load();
                                    },
                                    icon: '../../images/btns/arrow_refresh.ico',
                                    text: ''
                                }
                            ]
                        }
                    ],
                    selModel: {
                        selType: 'checkboxmodel'
                    },
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'id',
                            text: 'ID'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'nombre',
                            text: 'Nombre',
                            flex: 1
                        }
                    ]
                },
                {
                    xtype: 'checkboxfield',
                    padding: '0 0 0 20',
                    fieldLabel: 'Label',
                    hideLabel: true,
                    name: 'include_personas_empresa',
                    boxLabel: 'Filtro por Empresas',
                    inputValue: '1',
                    uncheckedValue: '0',
                    listeners: {
                        change: 'onCheckboxfieldChange2'
                    }
                },
                {
                    xtype: 'treepanel',
                    height: 250,
                    id: 'tree_personas_empresas',
                    header: false,
                    title: 'My Tree Grid Panel',
                    store: 'jsonGroupEmpresa',
                    columns: [
                        {
                            xtype: 'treecolumn',
                            sortable: true,
                            dataIndex: 'text',
                            menuDisabled: true,
                            text: 'Nodes',
                            flex: 1
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            id: 'toolEmpresa',
                            items: [
                                {
                                    xtype: 'label',
                                    id: 'labelEmpresa',
                                    maxWidth: 100,
                                    minWidth: 100,
                                    width: 100,
                                    text: 'Empresas'
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        Ext.getStore("jsonGroupEmpresa").load();
                                    },
                                    icon: '../../images/btns/arrow_refresh.ico',
                                    text: ''
                                }
                            ]
                        }
                    ],
                    listeners: {
                        itemclick: 'onTree_personas_empresasItemClick'
                    }
                },
                {
                    xtype: 'checkboxfield',
                    padding: '0 0 0 20',
                    fieldLabel: 'Label',
                    hideLabel: true,
                    name: 'include_personas_selected',
                    boxLabel: 'Filtro por Personas',
                    inputValue: '1',
                    uncheckedValue: '0',
                    listeners: {
                        change: 'onCheckboxfieldChange22'
                    }
                },
                {
                    xtype: 'gridpanel',
                    height: 300,
                    id: 'grid_personas',
                    maxHeight: 300,
                    minHeight: 300,
                    scrollable: true,
                    header: false,
                    title: 'Selección discreta',
                    reserveScrollbar: true,
                    store: 'trabajadores',
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'bottom',
                            width: 360,
                            displayInfo: true,
                            store: 'trabajadores'
                        },
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'label',
                                    maxWidth: 100,
                                    minWidth: 100,
                                    width: 100,
                                    text: 'Personas'
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        Ext.getStore("trabajadores").load();
                                    },
                                    icon: '../../images/btns/arrow_refresh.ico',
                                    text: ''
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'radiofield',
                                    fieldLabel: 'Label',
                                    hideLabel: true,
                                    name: 'radio_f_ver',
                                    boxLabel: 'Mostrar todos',
                                    checked: true
                                },
                                {
                                    xtype: 'radiofield',
                                    fieldLabel: 'Label',
                                    hideLabel: true,
                                    name: 'radio_f_ver',
                                    boxLabel: 'Mostrar seleccionados'
                                }
                            ]
                        }
                    ],
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'rut',
                            text: 'Rut'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'digito_ver',
                            text: 'Digito Ver'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'nombres',
                            text: 'Nombres'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'ape_paterno',
                            text: 'Ape Paterno'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'ape_materno',
                            text: 'Ape Materno'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'mail',
                            text: 'Mail'
                        }
                    ],
                    selModel: {
                        selType: 'checkboxmodel'
                    }
                },
                {
                    xtype: 'checkboxfield',
                    padding: '0 0 0 20',
                    fieldLabel: 'Label',
                    hideLabel: true,
                    name: 'include_personas_cargo',
                    boxLabel: 'Filtro por Cargos',
                    inputValue: '1',
                    uncheckedValue: '0',
                    listeners: {
                        change: 'onCheckboxfieldChange21'
                    }
                },
                {
                    xtype: 'gridpanel',
                    height: 300,
                    id: 'grid_personas_cargos',
                    maxHeight: 300,
                    minHeight: 300,
                    header: false,
                    title: 'Cargos',
                    store: 'jsonGroupCargo',
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'bottom',
                            width: 360,
                            displayInfo: true,
                            store: 'jsonGroupCargo'
                        },
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'label',
                                    maxWidth: 100,
                                    minWidth: 100,
                                    width: 100,
                                    text: 'Cargos'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        Ext.getStore("jsonGroupCargo").load();
                                    },
                                    icon: '../../images/btns/arrow_refresh.ico',
                                    text: ''
                                }
                            ]
                        }
                    ],
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            dataIndex: 'id',
                            text: 'ID'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'nombre',
                            text: 'Nombre',
                            flex: 1
                        }
                    ],
                    selModel: {
                        selType: 'checkboxmodel'
                    }
                },
                {
                    xtype: 'checkboxfield',
                    padding: '0 0 0 20',
                    fieldLabel: 'Label',
                    hideLabel: true,
                    name: 'include_personas_ciudad',
                    boxLabel: 'Filtro por Ciudades',
                    inputValue: '1',
                    uncheckedValue: '0',
                    listeners: {
                        change: 'onCheckboxfieldChange211'
                    }
                },
                {
                    xtype: 'gridpanel',
                    height: 300,
                    id: 'grid_personas_ciudades',
                    maxHeight: 300,
                    minHeight: 300,
                    header: false,
                    title: 'Regiones',
                    store: 'jsonGroupCiudad',
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'bottom',
                            width: 360,
                            displayInfo: true,
                            store: 'jsonGroupCiudad'
                        },
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'label',
                                    maxWidth: 100,
                                    minWidth: 100,
                                    width: 100,
                                    text: 'Ciudades'
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        Ext.getStore("jsonGroupCiudad").load();
                                    },
                                    icon: '../../images/btns/arrow_refresh.ico',
                                    text: ''
                                }
                            ]
                        }
                    ],
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            dataIndex: 'id',
                            text: 'ID'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'nombre',
                            text: 'Nombre',
                            flex: 1
                        }
                    ],
                    selModel: {
                        selType: 'checkboxmodel'
                    }
                },
                {
                    xtype: 'checkboxfield',
                    padding: '0 0 0 20',
                    fieldLabel: 'Label',
                    hideLabel: true,
                    name: 'include_personas_comuna',
                    boxLabel: 'Filtro por Comunas',
                    inputValue: '1',
                    uncheckedValue: '0',
                    listeners: {
                        change: 'onCheckboxfieldChange2111'
                    }
                },
                {
                    xtype: 'gridpanel',
                    height: 300,
                    id: 'grid_personas_comunas',
                    maxHeight: 300,
                    minHeight: 300,
                    header: false,
                    title: 'Comunas',
                    store: 'jsonGroupComuna',
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'bottom',
                            width: 360,
                            displayInfo: true,
                            store: 'jsonGroupComuna'
                        },
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'label',
                                    maxWidth: 100,
                                    minWidth: 100,
                                    width: 100,
                                    text: 'Comunas'
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        Ext.getStore("jsonGroupComuna").load();
                                    },
                                    icon: '../../images/btns/arrow_refresh.ico',
                                    text: ''
                                }
                            ]
                        }
                    ],
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            dataIndex: 'id',
                            text: 'ID'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'nombre',
                            text: 'Nombre',
                            flex: 1
                        }
                    ],
                    selModel: {
                        selType: 'checkboxmodel'
                    }
                },
                {
                    xtype: 'checkboxfield',
                    padding: '0 0 0 20',
                    fieldLabel: 'Label',
                    hideLabel: true,
                    name: 'include_personas_organica',
                    boxLabel: 'Filtro por Unidades',
                    inputValue: '1',
                    uncheckedValue: '0',
                    listeners: {
                        change: 'onCheckboxfieldChange21111'
                    }
                },
                {
                    xtype: 'treepanel',
                    height: 450,
                    id: 'tree_personas_organica',
                    maxHeight: 450,
                    minHeight: 450,
                    header: false,
                    title: 'Orgánica',
                    store: 'jsonGroupUnidades',
                    columns: [
                        {
                            xtype: 'treecolumn',
                            dataIndex: 'text',
                            text: 'Nodes',
                            flex: 1
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'label',
                                    maxWidth: 100,
                                    minWidth: 100,
                                    width: 100,
                                    text: 'Orgánica'
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        Ext.getStore("jsonGroupUnidades").load();
                                    },
                                    icon: '../../images/btns/arrow_refresh.ico',
                                    text: ''
                                }
                            ]
                        }
                    ],
                    listeners: {
                        itemclick: 'onTree_personas_organicaItemClick'
                    }
                }
            ]
        },
        {
            xtype: 'hiddenfield',
            id: 'hidden_empresas',
            fieldLabel: 'Label',
            name: 'empresas'
        },
        {
            xtype: 'hiddenfield',
            id: 'hidden_personas',
            fieldLabel: 'Label',
            name: 'personas'
        },
        {
            xtype: 'hiddenfield',
            id: 'hidden_cc',
            fieldLabel: 'Label',
            name: 'cc'
        },
        {
            xtype: 'hiddenfield',
            anchor: '100%',
            id: 'hidden_cargos',
            fieldLabel: 'Label',
            name: 'cargos'
        },
        {
            xtype: 'hiddenfield',
            anchor: '100%',
            id: 'hidden_ciudades',
            fieldLabel: 'Label',
            name: 'ciudades'
        },
        {
            xtype: 'hiddenfield',
            anchor: '100%',
            id: 'hidden_comunas',
            fieldLabel: 'Label',
            name: 'comunas'
        },
        {
            xtype: 'hiddenfield',
            anchor: '100%',
            id: 'hidden_unidades',
            fieldLabel: 'Label',
            name: 'unidades'
        }
    ],
    listeners: {
        render: 'onPanelGrupos_grupoRender'
    },

    onCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
                if(newValue == 1) {
                    console.log("Loading genero...");

                    Ext.getStore("jsonGroupGenero").on("load",function() {
                        Ext.getStore("jsonGroupGenero").data.each(function(item, index, totalItems ) {
                            if(item.get("selected") == true) {
                                Ext.getCmp("combo_genero").setValue(item.get("id"));
                            }
                        });
                    }, this, {
                        single : true
                    });

                    Ext.getStore("jsonGroupGenero").load();

                }

                Ext.getCmp("combo_genero").setHidden(newValue != 1);
    },

    onCheckboxfieldChange1: function(field, newValue, oldValue, eOpts) {
        if(newValue == 1) {
            console.log("Loading CentroCosto...");

            Ext.getStore("jsonGroupCentroCosto").on("load",function() {
                Ext.getStore("jsonGroupCentroCosto").data.each(function(item, index, totalItems ) {
                    if(item.get("selected") == true || item.get("selected") == "true") {
                        Ext.getCmp("grid_cc").getSelectionModel().select(item,true,false);
                    }
                    else {

                    }
                });
            }, this, {
                single : true
            });

            Ext.getStore("jsonGroupCentroCosto").load();


        }

        Ext.getCmp("grid_cc").setHidden(newValue != 1);

    },

    onCheckboxfieldChange2: function(field, newValue, oldValue, eOpts) {
                    if(newValue == 1) {
                        console.log("Loading jsonGroupEmpresa...");
                        Ext.getStore("jsonGroupEmpresa").load();
                    }

                    Ext.getCmp("tree_personas_empresas").setHidden(newValue != 1);


    },

    onTree_personas_empresasItemClick: function(dataview, record, item, index, e, eOpts) {

                console.log(("treePanelClick") + " " + record.get("activo"));
                var strId = record.get('id');

                 var bolAtivo = false;
                 var strIcon = null;

                if (record.get('activo')!=true && record.get('activo')!= "true" ){
                    console.log("to true");
                    strIcon = '../../images/btns/checkbox_add.png';
                    bolAtivo = true;
                }
                else {
                    console.log("to false");
                    bolAtivo = false;
                    strIcon = '../../images/btns/checkbox_null.png';
                }

                record.set('icon', strIcon);
                record.set('activo', bolAtivo);

                treeNode = Ext.getCmp('tree_personas_empresas').getRootNode();
                treeNode = treeNode.findChild('id',strId,true);
                MyApp.app.getController("ctrTool").tree_setSelected(treeNode, function(node){
                        node.set('icon', strIcon);
                        node.set('activo', bolAtivo);
                    });


    },

    onCheckboxfieldChange22: function(field, newValue, oldValue, eOpts) {
                    if(newValue == 1) {
                        console.log("Loading trabajadores...");

                        Ext.getStore("trabajadores").on("load",function() {
                            Ext.getStore("trabajadores").data.each(function(item, index, totalItems ) {
                                if(item.get("selected") == true || item.get("selected") == "true") {
                                    Ext.getCmp("grid_personas").getSelectionModel().select(item,true,false);
                                }
                                else {

                                }
                            });
                        }, this, {
                            single : true
                        });


                        Ext.getStore("trabajadores").load();
                    }

                    Ext.getCmp("grid_personas").setHidden(newValue != 1);


    },

    onCheckboxfieldChange21: function(field, newValue, oldValue, eOpts) {
                if(newValue == 1) {
                    console.log("Loading Cargos...");

                    Ext.getStore("jsonGroupCargo").on("load",function() {
                        Ext.getStore("jsonGroupCargo").data.each(function(item, index, totalItems ) {
                            if(item.get("selected") == true || item.get("selected") == "true") {
                                Ext.getCmp("grid_personas_cargos").getSelectionModel().select(item,true,false);
                            }
                            else {

                            }
                        });
                    }, this, {
                        single : true
                    });


                    Ext.getStore("jsonGroupCargo").load();
                }

                Ext.getCmp("grid_personas_cargos").setHidden(newValue != 1);


    },

    onCheckboxfieldChange211: function(field, newValue, oldValue, eOpts) {
                    if(newValue == 1) {
                        console.log("Loading Ciudad...");

                        Ext.getStore("jsonGroupCiudad").on("load",function() {
                            Ext.getStore("jsonGroupCiudad").data.each(function(item, index, totalItems ) {
                                if(item.get("selected") == true || item.get("selected") == "true") {
                                    Ext.getCmp("grid_personas_ciudades").getSelectionModel().select(item,true,false);
                                }
                                else {

                                }
                            });
                        }, this, {
                            single : true
                        });


                        Ext.getStore("jsonGroupCiudad").load();
                    }


                    Ext.getCmp("grid_personas_ciudades").setHidden(newValue != 1);


    },

    onCheckboxfieldChange2111: function(field, newValue, oldValue, eOpts) {
                if(newValue == 1) {
                    console.log("Loading Comuna...");

                    Ext.getStore("jsonGroupComuna").on("load",function() {
                        Ext.getStore("jsonGroupComuna").data.each(function(item, index, totalItems ) {
                            if(item.get("selected") == true || item.get("selected") == "true") {
                                Ext.getCmp("grid_personas_comunas").getSelectionModel().select(item,true,false);
                            }
                            else {

                            }
                        });
                    }, this, {
                        single : true
                    });

                    Ext.getStore("jsonGroupComuna").load();
                }


                Ext.getCmp("grid_personas_comunas").setHidden(newValue != 1);


    },

    onCheckboxfieldChange21111: function(field, newValue, oldValue, eOpts) {
        if(newValue == 1) {
            console.log("Loading ciudad");
            Ext.getStore("jsonGroupUnidades").removeAll(true);
            Ext.getStore("jsonGroupUnidades").load();
        }


        Ext.getCmp("tree_personas_organica").setHidden(newValue != 1);


    },

    onTree_personas_organicaItemClick: function(dataview, record, item, index, e, eOpts) {

                console.log(("treePanelClick") + " " + record.get("activo"));
                var strId = record.get('id');

                 var bolAtivo = false;
                 var strIcon = null;

                if (record.get('activo')!=true && record.get('activo')!= "true" ){
                    console.log("to true");
                    strIcon = '../../images/btns/checkbox_add.png';
                    bolAtivo = true;
                }
                else {
                    console.log("to false");
                    bolAtivo = false;
                    strIcon = '../../images/btns/checkbox_null.png';
                }

                record.set('icon', strIcon);
                record.set('activo', bolAtivo);

                treeNode = Ext.getCmp('tree_personas_organica').getRootNode();
                treeNode = treeNode.findChild('id',strId,true);
                MyApp.app.getController("ctrTool").tree_setSelected(treeNode, function(node){
                        node.set('icon', strIcon);
                        node.set('activo', bolAtivo);
                    });

    },

    onPanelGrupos_grupoRender: function(component, eOpts) {
                Ext.getCmp("combo_genero").setHidden(true);
                Ext.getCmp("grid_cc").setHidden(true);
                Ext.getCmp("tree_personas_empresas").setHidden(true);
                Ext.getCmp("grid_personas").setHidden(true);
                Ext.getCmp("grid_personas_cargos").setHidden(true);
                Ext.getCmp("grid_personas_ciudades").setHidden(true);
                Ext.getCmp("grid_personas_comunas").setHidden(true);
                Ext.getCmp("tree_personas_organica").setHidden(true);

                console.log(Ext.getCmp("hidden_id_grupo").getValue());

    },

    loadGrupoDefinition: function(idGrupo) {
                console.log("Loading IDGRUPO:"+idGrupo);
                var s = Ext.getStore("jsonGroupLoad");
                var p = s.getProxy();
                p.setExtraParam("id_grupo", idGrupo);

                Ext.getStore("jsonGroupGenero").getProxy().setExtraParam("id_grupo", idGrupo);
                //Ext.getStore("jsonGroupGenero").load();

                Ext.getStore("jsonGroupCentroCosto").getProxy().setExtraParam("id_grupo", idGrupo);
                //Ext.getStore("jsonGroupCentroCosto").load();

                Ext.getStore("jsonGroupEmpresa").getProxy().setExtraParam("id_grupo", idGrupo);
                //Ext.getStore("jsonGroupEmpresa").load();

                Ext.getStore("trabajadores").getProxy().setExtraParam("id_grupo", idGrupo);
                //Ext.getStore("trabajadores").load();

                Ext.getStore("jsonGroupCargo").getProxy().setExtraParam("id_grupo", idGrupo);
                //Ext.getStore("jsonGroupCargo").load();

                Ext.getStore("jsonGroupCiudad").getProxy().setExtraParam("id_grupo", idGrupo);
                //Ext.getStore("jsonGroupCiudad").load();

                Ext.getStore("jsonGroupComuna").getProxy().setExtraParam("id_grupo", idGrupo);
                //Ext.getStore("jsonGroupComuna").load();

                Ext.getStore("jsonGroupUnidades").getProxy().setExtraParam("id_grupo", idGrupo);
                //Ext.getStore("jsonGroupUnidades").load();

                s.on("load", function() {
                    var rec = s.findRecord('id_grupo', idGrupo);
                    Ext.getCmp("panelGrupos_grupo").getForm().loadRecord(rec);
                }, this, {
                    single : true
                });


                s.load();
                /*
                Ext.getCmp("hidden_nombre").setValue(" ");
                Ext.getCmp("hidden_descripcion").setValue(" ");


                var form = Ext.getCmp("panelGrupos_grupo").getForm();
                form.submit({
                    url : "../../../EjeS",
                    params : {
                        "modulo" : "eje_generico_correspondenciaautomatica",
                        "accion" : "get",
                        "thing" : "Group"
                    },
                    "waitMsg" : "Cargando...",
                    success: function (form, action) {
                        var resp  = action.result;

                        Ext.each(resp.data , function(k,v) {
                               console.log(k);
                               console.log(v);
                        }, this);


                    },
                    failure : function() {

                    }

                });
                */


    }

});