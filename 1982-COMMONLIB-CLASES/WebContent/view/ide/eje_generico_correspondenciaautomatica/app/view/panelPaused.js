/*
 * File: app/view/panelPaused.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.panelPaused', {
    extend: 'Ext.form.Panel',
    alias: 'widget.panelPaused',

    requires: [
        'MyApp.view.panelSendedViewModel1',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.grid.column.Action',
        'Ext.toolbar.Paging',
        'Ext.selection.CheckboxModel',
        'Ext.button.Button'
    ],

    viewModel: {
        type: 'panelpaused'
    },
    height: 540,
    id: 'panelPaused',
    width: 919,
    layout: 'border',
    bodyPadding: 10,
    title: 'Correos Programados',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'gridpanel',
            region: 'center',
            id: 'gridPanelPaused',
            header: false,
            title: 'My Grid Panel',
            store: 'mailStore',
            columns: [
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    minWidth: 60,
                    width: 50,
                    dataIndex: 'id_correspondencia',
                    text: 'ID'
                },
                {
                    xtype: 'gridcolumn',
                    maxWidth: 120,
                    minWidth: 120,
                    width: 120,
                    dataIndex: 'fec_execute',
                    text: 'Fec. a enviar'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'asunto',
                    text: 'Asunto',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'body',
                    text: 'Body'
                },
                {
                    xtype: 'actioncolumn',
                    width: 30,
                    menuDisabled: true,
                    text: 'TO',
                    items: [
                        {
                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                MyApp.app.getController("ctrTool")
                                .fnShowWindow("windowDestinatarios", null,
                                {"id_correspondencia": record.get("id_correspondencia"),
                                    "recipient":"to",
                                "id_timer": record.get("id_timer") });


                            },
                            icon: '../../images/btns/mail_yellow.ico'
                        }
                    ]
                },
                {
                    xtype: 'actioncolumn',
                    width: 30,
                    menuDisabled: true,
                    text: 'CC',
                    items: [
                        {
                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                MyApp.app.getController("ctrTool")
                                .fnShowWindow("windowDestinatarios", null,
                                {"id_correspondencia": record.get("id_correspondencia"),
                                    "recipient":"cc",
                                "id_timer": record.get("id_timer") });


                            },
                            icon: '../../images/btns/mail_yellow.ico'
                        }
                    ]
                },
                {
                    xtype: 'actioncolumn',
                    width: 30,
                    menuDisabled: true,
                    text: 'BCC',
                    items: [
                        {
                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                MyApp.app.getController("ctrTool")
                                .fnShowWindow("windowDestinatarios", null,
                                {"id_correspondencia": record.get("id_correspondencia"),
                                    "recipient":"bcc",
                                "id_timer": record.get("id_timer") });


                            },
                            icon: '../../images/btns/mail_yellow.ico'
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    displayInfo: true,
                    store: 'mailStore'
                }
            ],
            listeners: {
                itemclick: 'onGridpanelItemClick'
            },
            selModel: {
                selType: 'checkboxmodel'
            }
        },
        {
            xtype: 'panel',
            region: 'south',
            split: true,
            height: 150,
            id: 'Mensaje',
            scrollable: true,
            collapsible: true,
            title: 'Mensaje'
        }
    ],
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            items: [
                {
                    xtype: 'button',
                    handler: function(button, e) {
                        Ext.getStore("mailStore").getProxy().setExtraParam("thing", "MailProgramed");
                        Ext.getStore("mailStore").load();

                    },
                    icon: '../../images/btns/arrow_refresh.ico',
                    text: '',
                    tooltip: 'Refrescar'
                },
                {
                    xtype: 'button',
                    handler: function(button, e) {
                        var form = Ext.getCmp('panelPaused').getForm();

                        var url = "../../../EjeCore?claseweb=cl.eje.view.sencha.ConfSegura&";
                        url    += "modulo=eje_generico_correspondenciaautomatica&accion=del&thing=MailProgramed";



                        form.submit({
                            waitMsg:'Eliminado programaciones...',
                            params: {
                                ids : MyApp.app.getController("ctrTool").grid_getSelected("gridPanelPaused", "id_timer")
                            },
                            url: url,
                            success: function(form,action) {
                                var resp = action.result;

                                if(resp.success == true) {
                                    MyApp.app.getController("ctrTool").grid_delSelected("gridPanelPaused");
                                }
                                else {
                                    Ext.MessageBox.alert('Error',"Error desconocido");
                                }
                            },
                            failure: function(form,action){
                                Ext.MessageBox.alert('Error',"Error desconocido");
                            }
                        });


                    },
                    icon: '../../images/btns/cross.ico',
                    text: '',
                    tooltip: 'Eliminar selecci√≥n'
                }
            ]
        }
    ],
    listeners: {
        render: 'onPanelSendedRender'
    },

    onGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {

        Ext.getCmp("Mensaje").update(record.get("body"));
    },

    onPanelSendedRender: function(component, eOpts) {
        Ext.getStore("mailStore").getProxy().setExtraParam("thing", "MailProgramed");
        Ext.getStore("mailStore").load();

    }

});