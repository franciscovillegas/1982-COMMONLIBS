/*
 * File: app/view/window_cargoViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.window_cargoViewModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.window_cargo',

    requires: [
        'Ext.data.Store',
        'Ext.data.proxy.Memory'
    ],

    stores: {
        myModels: {
            model: 'MyApp.model.MyModel',
            data: [
                {
                    id: 181,
                    myField: 'illum'
                },
                {
                    id: 96,
                    myField: 'quo'
                },
                {
                    id: 425,
                    myField: 'ratione'
                },
                {
                    id: 426,
                    myField: 'quidem'
                },
                {
                    id: 348,
                    myField: 'ipsa'
                },
                {
                    id: 895,
                    myField: 'quia'
                },
                {
                    id: 47,
                    myField: 'qui'
                },
                {
                    id: 156,
                    myField: 'voluptates'
                },
                {
                    id: 609,
                    myField: 'quasi'
                },
                {
                    id: 607,
                    myField: 'alias'
                },
                {
                    id: 487,
                    myField: 'repudiandae'
                },
                {
                    id: 750,
                    myField: 'aut'
                },
                {
                    id: 227,
                    myField: 'non'
                },
                {
                    id: 225,
                    myField: 'consequuntur'
                },
                {
                    id: 178,
                    myField: 'et'
                },
                {
                    id: 705,
                    myField: 'molestias'
                },
                {
                    id: 293,
                    myField: 'quae'
                },
                {
                    id: 706,
                    myField: 'consequatur'
                },
                {
                    id: 82,
                    myField: 'neque'
                },
                {
                    id: 71,
                    myField: 'sed'
                },
                {
                    id: 946,
                    myField: 'numquam'
                },
                {
                    id: 619,
                    myField: 'reprehenderit'
                },
                {
                    id: 875,
                    myField: 'nostrum'
                },
                {
                    id: 696,
                    myField: 'error'
                },
                {
                    id: 353,
                    myField: 'minus'
                },
                {
                    id: 259,
                    myField: 'aut'
                },
                {
                    id: 898,
                    myField: 'consequatur'
                },
                {
                    id: 295,
                    myField: 'rerum'
                },
                {
                    id: 46,
                    myField: 'eos'
                },
                {
                    id: 636,
                    myField: 'error'
                }
            ],
            proxy: {
                type: 'memory'
            }
        }
    }

});